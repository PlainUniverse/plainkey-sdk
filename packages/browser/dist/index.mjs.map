{"version":3,"file":"index.mjs","names":["errorData: ErrorResponse","credential: RegistrationResponseJSON","completeParams: RegistrationCompleteRequest","response: RegistrationCompleteResponse","completeParams: UserCredentialCompleteRequest","response: UserCredentialCompleteResponse","beginResponseData: LoginBeginResponse","authenticationResponse: AuthenticationResponseJSON","completeParams: LoginCompleteRequest","verificationResponseData: LoginCompleteResponse"],"sources":["../src/plainkey-client.ts"],"sourcesContent":["import { startAuthentication, startRegistration } from \"@simplewebauthn/browser\"\r\nimport { RegistrationResponseJSON, AuthenticationResponseJSON } from \"@simplewebauthn/browser\"\r\n\r\nimport type {\r\n  RegistrationBeginRequest,\r\n  RegistrationCompleteRequest,\r\n  UserCredentialBeginRequest,\r\n  UserCredentialCompleteRequest,\r\n  LoginBeginRequest,\r\n  LoginCompleteRequest\r\n} from \"./types/requests\"\r\n\r\nimport type {\r\n  RegistrationBeginResponse,\r\n  RegistrationCompleteResponse,\r\n  UserCredentialBeginResponse,\r\n  UserCredentialCompleteResponse,\r\n  LoginBeginResponse,\r\n  LoginCompleteResponse,\r\n  ErrorResponse\r\n} from \"./types/responses\"\r\n\r\nexport type PlainKeyClientParams = {\r\n  // The client ID tied to the project.\r\n  clientId: string\r\n\r\n  // The base URL of the PlainKey API.\r\n  baseUrl?: string\r\n}\r\n\r\n// TODO: Account for errors like this: \"Unexpected token 'R', \"Response v\"... is not valid JSON\"\r\nexport class PlainKeyClient {\r\n  private readonly clientId: string\r\n  private readonly baseUrl: string\r\n\r\n  constructor(clientParams: PlainKeyClientParams) {\r\n    const { clientId, baseUrl = \"https://api.plainkey.io\" } = clientParams\r\n\r\n    this.clientId = clientId\r\n    this.baseUrl = baseUrl.replace(/\\/$/, \"\") // Remove trailing slash\r\n  }\r\n\r\n  /**\r\n   * Registration of a new user with passkey.\r\n   * Creates a new user and adds a credential to it.\r\n   */\r\n  async Registration(beginParams: RegistrationBeginRequest): Promise<RegistrationCompleteResponse> {\r\n    // Step 1: Get registration options from server\r\n    const headers = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      \"client-id\": this.clientId\r\n    })\r\n\r\n    const beginResponse = await fetch(`${this.baseUrl}/user/register/begin`, {\r\n      method: \"POST\",\r\n      headers,\r\n      credentials: \"include\",\r\n      body: JSON.stringify(beginParams)\r\n    })\r\n\r\n    if (!beginResponse.ok) {\r\n      const errorData: ErrorResponse = await beginResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    const { options, user } = (await beginResponse.json()) as RegistrationBeginResponse\r\n\r\n    // Step 2: Create credential using browser's WebAuthn API\r\n    const credential: RegistrationResponseJSON = await startRegistration({\r\n      optionsJSON: options\r\n    })\r\n\r\n    // Step 3: Send credential to server for verification\r\n    const completeParams: RegistrationCompleteRequest = {\r\n      userIdentifier: { userId: user.id },\r\n      credential\r\n    }\r\n\r\n    const completeResponse = await fetch(`${this.baseUrl}/user/register/complete`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"client-id\": this.clientId\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(completeParams)\r\n    })\r\n\r\n    if (!completeResponse.ok) {\r\n      const errorData: ErrorResponse = await completeResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    // Intentionally not throwing errors on verification failure - UI should handle this.\r\n    const response: RegistrationCompleteResponse = await completeResponse.json()\r\n    if (!response) throw new Error(\"No registration response from server\")\r\n\r\n    return response\r\n  }\r\n\r\n  /**\r\n   * Add credential to existing user.\r\n   * Requires valid user authentication token (log user in first which will set a user token cookie, then call this).\r\n   */\r\n  async AddCredential(\r\n    beginParams: UserCredentialBeginRequest\r\n  ): Promise<UserCredentialCompleteResponse> {\r\n    // Step 1: Get credential registration options from server\r\n    const headers = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      \"client-id\": this.clientId\r\n    })\r\n\r\n    const beginResponse = await fetch(`${this.baseUrl}/user/credential/begin`, {\r\n      method: \"POST\",\r\n      headers,\r\n      credentials: \"include\",\r\n      body: JSON.stringify(beginParams)\r\n    })\r\n\r\n    if (!beginResponse.ok) {\r\n      const errorData: ErrorResponse = await beginResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    const { options, user } = (await beginResponse.json()) as UserCredentialBeginResponse\r\n\r\n    // Step 2: Create credential using browser's WebAuthn API\r\n    const credential: RegistrationResponseJSON = await startRegistration({\r\n      optionsJSON: options\r\n    })\r\n\r\n    // Step 3: Send credential to server for verification\r\n    const completeParams: UserCredentialCompleteRequest = {\r\n      userIdentifier: { userId: user.id },\r\n      credential\r\n    }\r\n\r\n    const completeResponse = await fetch(`${this.baseUrl}/user/credential/complete`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"client-id\": this.clientId\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(completeParams)\r\n    })\r\n\r\n    if (!completeResponse.ok) {\r\n      const errorData: ErrorResponse = await completeResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    // Intentionally not throwing errors on verification failure - UI should handle this.\r\n    const response: UserCredentialCompleteResponse = await completeResponse.json()\r\n    if (!response) throw new Error(\"No credential registration response from server\")\r\n\r\n    return response\r\n  }\r\n\r\n  /**\r\n   * Performs a login ceremony.\r\n   */\r\n  async Login(beginParams: LoginBeginRequest): Promise<LoginCompleteResponse> {\r\n    // Step 1: Get authentication options from server\r\n    const beginResponse = await fetch(`${this.baseUrl}/login/begin`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"client-id\": this.clientId\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(beginParams)\r\n    })\r\n\r\n    if (!beginResponse.ok) {\r\n      const errorData: ErrorResponse = await beginResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    const beginResponseData: LoginBeginResponse = await beginResponse.json()\r\n    if (!beginResponseData.options) {\r\n      throw new Error(\"No options found in login begin response\")\r\n    }\r\n\r\n    // Step 2: Pass options to the authenticator and wait for response\r\n    const authenticationResponse: AuthenticationResponseJSON = await startAuthentication({\r\n      optionsJSON: beginResponseData.options\r\n    })\r\n\r\n    if (!authenticationResponse) {\r\n      throw new Error(\"No authentication response from browser\")\r\n    }\r\n\r\n    // Step 3: POST the response to the server\r\n    const completeParams: LoginCompleteRequest = { authenticationResponse }\r\n\r\n    const verificationResponse = await fetch(`${this.baseUrl}/login/complete`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"client-id\": this.clientId\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(completeParams)\r\n    })\r\n\r\n    if (!verificationResponse.ok) {\r\n      const errorData: ErrorResponse = await verificationResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    // Intentionally not throwing errors on verification failure - UI should handle this.\r\n    const verificationResponseData: LoginCompleteResponse = await verificationResponse.json()\r\n    if (!verificationResponseData) throw new Error(\"No login verification response from server\")\r\n\r\n    return verificationResponseData\r\n  }\r\n}\r\n"],"mappings":"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"}