{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { startAuthentication, startRegistration } from \"@simplewebauthn/browser\"\r\nimport { RegistrationResponseJSON, AuthenticationResponseJSON } from \"@simplewebauthn/browser\"\r\n\r\nimport type {\r\n  RegistrationBeginRequest,\r\n  RegistrationCompleteRequest,\r\n  UserCredentialBeginRequest,\r\n  UserCredentialCompleteRequest,\r\n  LoginBeginRequest,\r\n  LoginCompleteRequest\r\n} from \"./types/requests\"\r\n\r\nimport type {\r\n  RegistrationBeginResponse,\r\n  RegistrationCompleteResponse,\r\n  UserCredentialBeginResponse,\r\n  UserCredentialCompleteResponse,\r\n  LoginBeginResponse,\r\n  LoginCompleteResponse,\r\n  ErrorResponse\r\n} from \"./types/responses\"\r\n\r\nexport type PlainKeyClientParams = {\r\n  // The client ID tied to the project.\r\n  clientId: string\r\n\r\n  // The base URL of the PlainKey API.\r\n  baseUrl?: string\r\n}\r\n\r\n// TODO: Account for errors like this: \"Unexpected token 'R', \"Response v\"... is not valid JSON\"\r\nexport class PlainKeyClient {\r\n  private readonly clientId: string\r\n  private readonly baseUrl: string\r\n\r\n  constructor(clientParams: PlainKeyClientParams) {\r\n    const { clientId, baseUrl = \"https://api.plainkey.io\" } = clientParams\r\n\r\n    this.clientId = clientId\r\n    this.baseUrl = baseUrl.replace(/\\/$/, \"\") // Remove trailing slash\r\n  }\r\n\r\n  /**\r\n   * Registration of a new user with passkey.\r\n   * Creates a new user and adds a credential to it.\r\n   */\r\n  async Registration(beginParams: RegistrationBeginRequest): Promise<RegistrationCompleteResponse> {\r\n    // Step 1: Get registration options from server\r\n    const headers = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      \"client-id\": this.clientId\r\n    })\r\n\r\n    const beginResponse = await fetch(`${this.baseUrl}/user/register/begin`, {\r\n      method: \"POST\",\r\n      headers,\r\n      credentials: \"include\",\r\n      body: JSON.stringify(beginParams)\r\n    })\r\n\r\n    if (!beginResponse.ok) {\r\n      const errorData: ErrorResponse = await beginResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    const { options, user } = (await beginResponse.json()) as RegistrationBeginResponse\r\n\r\n    // Step 2: Create credential using browser's WebAuthn API\r\n    const credential: RegistrationResponseJSON = await startRegistration({\r\n      optionsJSON: options\r\n    })\r\n\r\n    // Step 3: Send credential to server for verification\r\n    const completeParams: RegistrationCompleteRequest = {\r\n      userIdentifier: { userId: user.id },\r\n      credential\r\n    }\r\n\r\n    const completeResponse = await fetch(`${this.baseUrl}/user/register/complete`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"client-id\": this.clientId\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(completeParams)\r\n    })\r\n\r\n    if (!completeResponse.ok) {\r\n      const errorData: ErrorResponse = await completeResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    // Intentionally not throwing errors on verification failure - UI should handle this.\r\n    const response: RegistrationCompleteResponse = await completeResponse.json()\r\n    if (!response) throw new Error(\"No registration response from server\")\r\n\r\n    return response\r\n  }\r\n\r\n  /**\r\n   * Add credential to existing user.\r\n   * Requires valid user authentication token (log user in first which will set a user token cookie, then call this).\r\n   */\r\n  async AddCredential(\r\n    beginParams: UserCredentialBeginRequest\r\n  ): Promise<UserCredentialCompleteResponse> {\r\n    // Step 1: Get credential registration options from server\r\n    const headers = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      \"client-id\": this.clientId\r\n    })\r\n\r\n    const beginResponse = await fetch(`${this.baseUrl}/user/credential/begin`, {\r\n      method: \"POST\",\r\n      headers,\r\n      credentials: \"include\",\r\n      body: JSON.stringify(beginParams)\r\n    })\r\n\r\n    if (!beginResponse.ok) {\r\n      const errorData: ErrorResponse = await beginResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    const { options, user } = (await beginResponse.json()) as UserCredentialBeginResponse\r\n\r\n    // Step 2: Create credential using browser's WebAuthn API\r\n    const credential: RegistrationResponseJSON = await startRegistration({\r\n      optionsJSON: options\r\n    })\r\n\r\n    // Step 3: Send credential to server for verification\r\n    const completeParams: UserCredentialCompleteRequest = {\r\n      userIdentifier: { userId: user.id },\r\n      credential\r\n    }\r\n\r\n    const completeResponse = await fetch(`${this.baseUrl}/user/credential/complete`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"client-id\": this.clientId\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(completeParams)\r\n    })\r\n\r\n    if (!completeResponse.ok) {\r\n      const errorData: ErrorResponse = await completeResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    // Intentionally not throwing errors on verification failure - UI should handle this.\r\n    const response: UserCredentialCompleteResponse = await completeResponse.json()\r\n    if (!response) throw new Error(\"No credential registration response from server\")\r\n\r\n    return response\r\n  }\r\n\r\n  /**\r\n   * Performs a login ceremony.\r\n   */\r\n  async Login(beginParams: LoginBeginRequest): Promise<LoginCompleteResponse> {\r\n    // Step 1: Get authentication options from server\r\n    const beginResponse = await fetch(`${this.baseUrl}/login/begin`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"client-id\": this.clientId\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(beginParams)\r\n    })\r\n\r\n    if (!beginResponse.ok) {\r\n      const errorData: ErrorResponse = await beginResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    const beginResponseData: LoginBeginResponse = await beginResponse.json()\r\n    if (!beginResponseData.options) {\r\n      throw new Error(\"No options found in login begin response\")\r\n    }\r\n\r\n    // Step 2: Pass options to the authenticator and wait for response\r\n    const authenticationResponse: AuthenticationResponseJSON = await startAuthentication({\r\n      optionsJSON: beginResponseData.options\r\n    })\r\n\r\n    if (!authenticationResponse) {\r\n      throw new Error(\"No authentication response from browser\")\r\n    }\r\n\r\n    // Step 3: POST the response to the server\r\n    const completeParams: LoginCompleteRequest = { authenticationResponse }\r\n\r\n    const verificationResponse = await fetch(`${this.baseUrl}/login/complete`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"client-id\": this.clientId\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(completeParams)\r\n    })\r\n\r\n    if (!verificationResponse.ok) {\r\n      const errorData: ErrorResponse = await verificationResponse.json()\r\n      throw new Error(errorData.error)\r\n    }\r\n\r\n    // Intentionally not throwing errors on verification failure - UI should handle this.\r\n    const verificationResponseData: LoginCompleteResponse = await verificationResponse.json()\r\n    if (!verificationResponseData) throw new Error(\"No login verification response from server\")\r\n\r\n    return verificationResponseData\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}